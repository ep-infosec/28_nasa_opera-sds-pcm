#######################################################################
# This file defines the outputs that are expected to be produced by the
# different PGEs within the PCM.
#
# Outputs - This area defines the different file name patterns for the
# expected outputs:
#
# Primary - Refers to the primary output product, which is usually the image (*.tiff)
# files. Any product found here will be converted to a HySDS style
# dataset.
#
# Secondary - Refers to the other output product types like *.log, *.qa, etc.
# Any product found here will be copied into the dataset directories produced
# from the Primary section.
#
# Optional - Refers to other outputs that may/may not be produced from the
# PGE. If a product cannot be found with the regex patterns given here, PCM
# will still continue with processing.
#
# Missing_Metadata - Defines a list of metadata to fill in the .met.json.

# Key name MUST match the corresponding RunConfig jinja2 template filename.
L2_CSLC_S1:
  Outputs:
    Primary:
      # Pattern for parsing output image filenames, such as:
      # OPERA_L2_CSLC_S1A_IW_048-101101-IW3_VV_20190906T232711Z_v1.0_20230101T100506Z.tiff
      - regex: !!python/regexp '(?P<id>(?P<project>OPERA)_(?P<level>L2)_(?P<product_type>CSLC)_(?P<sensor>S1A|S1B)_(?P<mode>IW)_(?P<burst_id>\w{3}-\w{6}-\w{3})_(?P<pol>VV|VH|VV\+VH)_(?P<acquisition_ts>(?P<acq_year>\d{4})(?P<acq_month>\d{2})(?P<acq_day>\d{2})T(?P<acq_hour>\d{2})(?P<acq_minute>\d{2})(?P<acq_second>\d{2})Z)_(?P<product_version>v\d+[.]\d+)_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2})Z))[.](?P<ext>tiff|slc)$'
        verify: true
        hash: md5
    Secondary:
      # Patterns for parsing aux filenames, such as:
      # OPERA_L2_CSLC_S1A_IW_048-101101-IW3_VV_20190906T232711Z_v1.0_20230101T100506Z.json
      - regex: !!python/regexp '(?P<id>(?P<project>OPERA)_(?P<level>L2)_(?P<product_type>CSLC)_(?P<sensor>S1A|S1B)_(?P<mode>IW)_(?P<burst_id>\w{3}-\w{6}-\w{3})_(?P<pol>VV|VH|VV\+VH)_(?P<acquisition_ts>(?P<acq_year>\d{4})(?P<acq_month>\d{2})(?P<acq_day>\d{2})T(?P<acq_hour>\d{2})(?P<acq_minute>\d{2})(?P<acq_second>\d{2})Z)_(?P<product_version>v\d+[.]\d+)_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2})Z))[.](?P<ext>json|log|qa\.log|iso\.xml|catalog\.json)$'
        verify: false
    Optional: []
      # Pattern for optional output product filenames

  Missing_Metadata: {
    # "daac_product_type": "OPERA_L2_CSLC_S1_0.0"
  }
L2_RTC_S1:
  Outputs:
    Primary:
      # Pattern for parsing output image filenames, such as:
      # OPERA_L2_RTC_S1_t069_147170_iw1_20220913T215519Z_20220913T215519Z_S1A_30_v0.1.nc
      - regex: !!python/regexp '(?P<id>(?P<project>OPERA)_(?P<level>L2)_(?P<product_type>RTC)_(?P<source>S1)_(?P<burst_id>\w{4}_\w{6}_\w{3})_(?P<acquisition_ts>(?P<acq_year>\d{4})(?P<acq_month>\d{2})(?P<acq_day>\d{2})T(?P<acq_hour>\d{2})(?P<acq_minute>\d{2})(?P<acq_second>\d{2})Z)_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2})Z)_(?P<sensor>S1A|S1B)_(?P<spacing>30)_(?P<product_version>v\d+[.]\d+))[.](?P<ext>tif|tiff|nc|iso\.xml)$'
        verify: true
        hash: md5
    Secondary:
      # Patterns for parsing aux filenames, such as:
      # OPERA_L2_RTC_S1_20220913T215519Z_S1A_30_v0.1.log
      - regex: !!python/regexp '(?P<project>OPERA)_(?P<level>L2)_(?P<product_type>RTC)_(?P<source>S1)_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2})Z)_(?P<sensor>S1A|S1B)_(?P<spacing>30)_(?P<product_version>v\d+[.]\d+)[.](?P<ext>log|qa\.log|iso\.xml|catalog\.json)'
        verify: false
    Optional: []
      # Pattern for optional output product filenames

  Missing_Metadata: {
    # "daac_product_type": "OPERA_L2_RTC_S1_0.0"
  }
L3_DSWx_HLS:
  Outputs:
    Primary:
      # Pattern for parsing output image filenames, such as:
      # * "OPERA_L3_DSWx_HLS_T22VEQ_20210905T143156Z_20220105T143156Z_L8_30_v0.1_B01_WTF.tiff"
      # * "OPERA_L3_DSWx_HLS_T15SXR_20210907T163901Z_20220207T163901Z_S2A_30_v0.1_B09_CLOUD.tiff"
      - regex: !!python/regexp '(?P<id>(?P<project>OPERA)_(?P<level>L3)_(?P<product_type>DSWx_(?P<source>HLS))_(?P<tile_id>T[^\W_]{5})_(?P<acquisition_ts>(?P<acq_year>\d{4})(?P<acq_month>\d{2})(?P<acq_day>\d{2})T(?P<acq_hour>\d{2})(?P<acq_minute>\d{2})(?P<acq_second>\d{2})Z)_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2})Z)_(?P<sensor>S2A|S2B|L8|L9)_(?P<spacing>30)_(?P<collection_version>v\d+[.]\d+))_(?P<band_index>B\d{2})_(?P<band_name>WTR|BWTR|CONF|DIAG|WTR-1|WTR-2|LAND|SHAD|CLOUD|DEM)[.](?P<ext>tiff)$'
        verify: true
        hash: md5
    Secondary:
      # Patterns for parsing aux filenames, such as:
      # * "OPERA_L3_DSWx_HLS_T22VEQ_20210905T143156Z_20220105T143156Z_L8_30_v2.0.catalog.json"
      # * "OPERA_L3_DSWx_HLS_T15SXR_20210907T163901Z_20220207T163901Z_S2A_30_v2.0.iso.xml"
      - regex: !!python/regexp '(?P<id>(?P<project>OPERA)_(?P<level>L3)_(?P<product_type>DSWx_(?P<source>HLS))_(?P<tile_id>T[^\W_]{5})_(?P<acquisition_ts>(?P<acq_year>\d{4})(?P<acq_month>\d{2})(?P<acq_day>\d{2})T(?P<acq_hour>\d{2})(?P<acq_minute>\d{2})(?P<acq_second>\d{2})Z)_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2})Z)_(?P<sensor>S2A|S2B|L8|L9)_(?P<spacing>30)_(?P<collection_version>v\d+[.]\d+))[.](?P<ext>log|png|qa\.log|iso\.xml|catalog\.json)$'
        verify: false
    Optional: []
      # Pattern for optional output product filenames

  Missing_Metadata: {
  # "daac_product_type": "OPERA_L3_DSWX_HLS_0.0"
  }
